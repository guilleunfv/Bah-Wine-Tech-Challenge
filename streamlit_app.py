import openai
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt

# Configura a chave da OpenAI
openai.api_key = st.secrets["OPENAI_API_KEY"]

# ----------------------------------------------------------
# PARTE 1: An√°lise de Dados de Exporta√ß√£o de Vinhos
# ----------------------------------------------------------

@st.cache_data
def carregar_dados():
    url = "https://drive.google.com/uc?id=1-mrtTLjOPh_XVk1mkDH00SUJxWkuOu5o"
    dados = pd.read_csv(url, delimiter=';', encoding='utf-8', quotechar='"')
    dados.columns = dados.columns.str.strip()
    return dados

# Carregar os dados
df = carregar_dados()

# Layout do app
st.title("üç∑ An√°lise de Exporta√ß√£o de Vinhos + Bah Chat")
st.markdown(
    """
    Bem-vindo ao **Bah Chat**, o chatbot e ferramenta de an√°lise de dados de exporta√ß√£o de vinhos brasileiros.
    Use os gr√°ficos interativos e interaja com o chatbot para explorar os dados de exporta√ß√£o de vinhos.
    """
)

# Dados gerais
st.subheader("üìä Dados Gerais de Exporta√ß√£o")
st.dataframe(df)

# Filtros interativos
st.sidebar.header("üîç Filtros Interativos")
anos = st.sidebar.multiselect(
    "Selecione os Anos", 
    df['A√±o'].unique(), 
    default=df['A√±o'].unique()
)
df_filtrado = df[df['A√±o'].isin(anos)]

paises = st.sidebar.multiselect(
    "Selecione os Pa√≠ses", 
    df['Pa√≠s'].unique(), 
    default=df['Pa√≠s'].unique()[:10]
)
df_filtrado = df_filtrado[df_filtrado['Pa√≠s'].isin(paises)]

st.subheader("üîé Dados Filtrados")
st.dataframe(df_filtrado)

# Gr√°fico 1: Tend√™ncia de Exporta√ß√£o
st.subheader("üìà Tend√™ncia de Exporta√ß√£o (US$ FOB por Ano)")
fig, ax = plt.subplots(figsize=(10, 4))
df_group_ano = df_filtrado.groupby('A√±o')['Valor US$ FOB'].sum().sort_index()
ax.plot(df_group_ano.index, df_group_ano.values, color='#8B0000', marker='o')
ax.set_title("Tend√™ncia de Exporta√ß√£o de Vinhos", fontsize=16, color='#8B0000')
ax.set_xlabel("Ano", fontsize=14)
ax.set_ylabel("Valor Total (US$ FOB)", fontsize=14)
st.pyplot(fig)

# Gr√°fico 2: Exporta√ß√£o por Pa√≠s
st.subheader("üåç Exporta√ß√£o por Pa√≠s")
fig, ax = plt.subplots(figsize=(10, 4))
df_group_pais = df_filtrado.groupby('Pa√≠s')['Valor US$ FOB'].sum().sort_values(ascending=False).head(10)
df_group_pais.plot(kind='bar', color='#A52A2A', ax=ax)
ax.set_title("Top 10 Pa√≠ses de Destino", fontsize=16, color='#8B0000')
ax.set_xlabel("Pa√≠s", fontsize=14)
ax.set_ylabel("Valor Total (US$ FOB)", fontsize=14)
st.pyplot(fig)

# ----------------------------------------------------------
# PARTE 2: Bah Chat
# ----------------------------------------------------------

st.subheader("ü§ñ Bah Chat")

# Inicializa o hist√≥rico de mensagens
if "messages" not in st.session_state:
    st.session_state.messages = []

# Exibe as mensagens anteriores
for msg in st.session_state.messages:
    with st.chat_message(msg["role"]):
        st.markdown(msg["content"])

# Entrada de texto do usu√°rio
prompt = st.chat_input("Digite sua pergunta ou solicita√ß√£o...")
if prompt:
    # Adiciona a mensagem do usu√°rio ao hist√≥rico
    st.session_state.messages.append({"role": "user", "content": prompt})
    with st.chat_message("user"):
        st.markdown(prompt)

    # Faz a chamada para a API do ChatGPT
    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=st.session_state.messages
        )
        # Obt√©m a resposta
        answer = response["choices"][0]["message"]["content"]

        # Exibe a resposta no chat
        with st.chat_message("assistant"):
            st.markdown(answer)

        # Adiciona a resposta ao hist√≥rico
        st.session_state.messages.append({"role": "assistant", "content": answer})

    except Exception as e:
        st.error(f"Erro ao conectar com o Bah Chat: {e}")

# Fim do app
st.markdown("---")
st.markdown("üí° **Dica:** Use o Bah Chat para obter insights r√°pidos sobre os dados.")
